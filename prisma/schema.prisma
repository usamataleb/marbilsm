//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id               String         @id() @default(uuid())
  name             String?
  email            String?        @unique()
  pictureUrl       String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus     @default(VERIFIED)
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime       @default(now())
  dateUpdated      DateTime       @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  roles            Role[]
  projects         Project[]      @relation("user")
  timesheets       Timesheet[]    @relation("user")
  consultations    Consultation[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Project {
  id             String          @id() @default(uuid())
  name           String?
  description    String?
  startDate      String?
  endDate        String?
  status         String?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], name: "user")
  tasks          Task[]          @relation("project")
  projectClients ProjectClient[] @relation("project")
  dateCreated    DateTime        @default(now())
  dateUpdated    DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Task {
  id          String      @id() @default(uuid())
  name        String?
  description String?
  status      String?
  priority    String?
  dueDate     String?
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id], name: "project")
  timesheets  Timesheet[] @relation("task")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Timesheet {
  id          String   @id() @default(uuid())
  hoursWorked String?
  date        String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], name: "task")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ProjectClient {
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], name: "project")
  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id], name: "client")
  id          String   @id() @default(uuid())
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Client {
  id             String          @id() @default(uuid())
  name           String?
  contactEmail   String?
  contactPhone   String?
  address        String?
  projectClients ProjectClient[] @relation("client")
  invoices       Invoice[]       @relation("client")
  consultations  Consultation[]  @relation("client")
  dateCreated    DateTime        @default(now())
  dateUpdated    DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Invoice {
  id          String    @id() @default(uuid())
  amount      String?
  dueDate     String?
  status      String?
  clientId    String?
  client      Client?   @relation(fields: [clientId], references: [id], name: "client")
  payments    Payment[] @relation("invoice")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Payment {
  id          String   @id() @default(uuid())
  amount      String?
  date        String?
  method      String?
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id], name: "invoice")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Consultation {
  id          String   @id() @default(uuid())
  date        String?
  duration    String?
  notes       String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id], name: "client")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
